{"ast":null,"code":"var _jsxFileName = \"/Users/finnegan/projects/projects/goit/react/goit-react-hw-02-phonebook/src/App.js\";\nimport React from \"react\";\nimport ContactForm from \"./ContactForm/ContactForm\";\nimport ContactList from \"./ContactList/ContactList\";\nimport Filter from \"./Filter/Filter\";\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      contacts: [],\n      filter: ''\n    };\n\n    this.addNewContact = data => {\n      this.setState(prevState => ({\n        contacts: [...prevState.contacts, data]\n      }));\n    };\n\n    this.delContact = e => {\n      this.setState(prevState => ({\n        contacts: [...prevState.contacts.filter(contact => contact.id !== e.target.id)]\n      }));\n    };\n\n    this.changeFilter = e => {\n      const {\n        value\n      } = e.currentTarget;\n      this.setState({\n        filter: value\n      });\n    };\n\n    this.getVisibleContacts = () => {\n      const {\n        filter,\n        contacts\n      } = this.state;\n      const lowerFilter = filter.toLowerCase();\n      return contacts.filter(contact => contact.name.toLowerCase().includes(lowerFilter));\n    };\n  }\n\n  componentDidMount() {\n    const parsedContacts = JSON.parse(localStorage.getItem('contacts'));\n    const initialContacts = [{\n      id: 'id-1',\n      name: 'Rosie Simpson',\n      number: '459-12-56',\n      sex: 'female'\n    }, {\n      id: 'id-2',\n      name: 'Hermione Kline',\n      number: '443-89-12',\n      sex: 'female'\n    }, {\n      id: 'id-3',\n      name: 'Eden Clements',\n      number: '645-17-79',\n      sex: 'male'\n    }, {\n      id: 'id-4',\n      name: 'Annie Copeland',\n      number: '227-91-26',\n      sex: 'female'\n    }];\n\n    if (parsedContacts) {\n      this.setState({\n        contacts: parsedContacts\n      });\n    }\n\n    this.setState({\n      contacts: initialContacts\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log(prevState);\n    console.log(this.state);\n\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  render() {\n    const filteredContacts = this.getVisibleContacts();\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Phonebook\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        contacts: this.state.contacts,\n        onSubmit: this.addNewContact\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Filter, {\n        handlerFilter: this.changeFilter,\n        filter: this.state.filter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactList, {\n        contacts: filteredContacts,\n        handlerDel: this.delContact\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default App;\nApp.propTypes = {\n  filter: PropTypes.string,\n  contacts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string,\n    sex: PropTypes.bool.isRequired\n  }))\n};","map":{"version":3,"sources":["/Users/finnegan/projects/projects/goit/react/goit-react-hw-02-phonebook/src/App.js"],"names":["React","ContactForm","ContactList","Filter","PropTypes","App","Component","state","contacts","filter","addNewContact","data","setState","prevState","delContact","e","contact","id","target","changeFilter","value","currentTarget","getVisibleContacts","lowerFilter","toLowerCase","name","includes","componentDidMount","parsedContacts","JSON","parse","localStorage","getItem","initialContacts","number","sex","componentDidUpdate","prevProps","console","log","setItem","stringify","render","filteredContacts","propTypes","string","arrayOf","shape","isRequired","bool"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ContactForm from \"./ContactForm/ContactForm\";\nimport ContactList from \"./ContactList/ContactList\";\nimport Filter from \"./Filter/Filter\";\nimport PropTypes from \"prop-types\";\n\n\n\nclass App extends React.Component {\n\n    state = {\n        contacts: [],\n        filter: ''\n    }\n\n\n\n    addNewContact = (data) => {\n        this.setState(prevState => ({\n           contacts: [...prevState.contacts, data]\n        }))\n    }\n\n    delContact = e => {\n        this.setState(prevState => ({\n            contacts: [...prevState.contacts.filter(contact => contact.id !== e.target.id)]\n        }))\n    }\n\n    changeFilter = e => {\n        const {value} = e.currentTarget\n        this.setState({filter: value})\n    }\n\n    getVisibleContacts = () => {\n        const {filter, contacts} = this.state\n        const lowerFilter = filter.toLowerCase()\n\n        return contacts.filter(contact =>\n            contact.name.toLowerCase().includes(lowerFilter))\n    }\n\n    componentDidMount() {\n        const parsedContacts = JSON.parse(localStorage.getItem('contacts'))\n        const initialContacts = [\n            {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56', sex: 'female'},\n            {id: 'id-2', name: 'Hermione Kline', number: '443-89-12', sex: 'female'},\n            {id: 'id-3', name: 'Eden Clements', number: '645-17-79', sex: 'male'},\n            {id: 'id-4', name: 'Annie Copeland', number: '227-91-26', sex: 'female'},\n        ]\n\n        if (parsedContacts) {\n            this.setState({contacts: parsedContacts})\n        } this.setState({contacts: initialContacts})\n\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        console.log(prevState)\n        console.log(this.state)\n\n        if (prevState.contacts !== this.state.contacts) {\n            localStorage.setItem('contacts', JSON.stringify(this.state.contacts))\n        }\n\n    }\n\n\n    render() {\n\n        const filteredContacts = this.getVisibleContacts()\n\n    return <>\n        <h1>Phonebook</h1>\n         <ContactForm\n             contacts={this.state.contacts}\n             onSubmit={this.addNewContact}/>\n\n        <h2>Contacts</h2>\n        <Filter handlerFilter={this.changeFilter}\n                filter={this.state.filter}/>\n        <ContactList contacts={filteredContacts}\n                     handlerDel={this.delContact}\n        />\n    </>\n  }\n}\n\nexport default App;\n\n\nApp.propTypes = {\n    filter: PropTypes.string,\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string,\n            sex: PropTypes.bool.isRequired\n        })\n    )\n};\n"]},"metadata":{},"sourceType":"module"}